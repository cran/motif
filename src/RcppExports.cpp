// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// create_attributes
List create_attributes(List x);
RcppExport SEXP _motif_create_attributes(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(create_attributes(x));
    return rcpp_result_gen;
END_RCPP
}
// get_composition
IntegerVector get_composition(const IntegerMatrix& x, std::vector<int> classes);
RcppExport SEXP _motif_get_composition(SEXP xSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_composition(x, classes));
    return rcpp_result_gen;
END_RCPP
}
// get_motifel_size
int get_motifel_size(int num_r, int num_c, int shift);
RcppExport SEXP _motif_get_motifel_size(SEXP num_rSEXP, SEXP num_cSEXP, SEXP shiftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num_r(num_rSEXP);
    Rcpp::traits::input_parameter< int >::type num_c(num_cSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    rcpp_result_gen = Rcpp::wrap(get_motifel_size(num_r, num_c, shift));
    return rcpp_result_gen;
END_RCPP
}
// get_motifels
List get_motifels(const List& input, std::string type, const arma::imat directions, int size, int shift, Function f, double threshold, List classes, const std::string fun, const std::string na_action);
RcppExport SEXP _motif_get_motifels(SEXP inputSEXP, SEXP typeSEXP, SEXP directionsSEXP, SEXP sizeSEXP, SEXP shiftSEXP, SEXP fSEXP, SEXP thresholdSEXP, SEXP classesSEXP, SEXP funSEXP, SEXP na_actionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::imat >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< int >::type shift(shiftSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< List >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const std::string >::type na_action(na_actionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_motifels(input, type, directions, size, shift, f, threshold, classes, fun, na_action));
    return rcpp_result_gen;
END_RCPP
}
// get_polygons
List get_polygons(const List& input, std::string type, const arma::imat& m, const arma::imat& directions, Function f, double threshold, const std::string fun, const std::string na_action, List classes);
RcppExport SEXP _motif_get_polygons(SEXP inputSEXP, SEXP typeSEXP, SEXP mSEXP, SEXP directionsSEXP, SEXP fSEXP, SEXP thresholdSEXP, SEXP funSEXP, SEXP na_actionSEXP, SEXP classesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type input(inputSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< const std::string >::type fun(funSEXP);
    Rcpp::traits::input_parameter< const std::string >::type na_action(na_actionSEXP);
    Rcpp::traits::input_parameter< List >::type classes(classesSEXP);
    rcpp_result_gen = Rcpp::wrap(get_polygons(input, type, m, directions, f, threshold, fun, na_action, classes));
    return rcpp_result_gen;
END_RCPP
}
// get_unique_values
std::vector<int> get_unique_values(const Rcpp::IntegerVector& x, bool na_omit);
RcppExport SEXP _motif_get_unique_values(SEXP xSEXP, SEXP na_omitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type na_omit(na_omitSEXP);
    rcpp_result_gen = Rcpp::wrap(get_unique_values(x, na_omit));
    return rcpp_result_gen;
END_RCPP
}
// na_prop
double na_prop(const IntegerMatrix& x, int size);
RcppExport SEXP _motif_na_prop(SEXP xSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(na_prop(x, size));
    return rcpp_result_gen;
END_RCPP
}
// na_prop_polygon
double na_prop_polygon(const arma::imat& x, const double& no_of_outside_cells);
RcppExport SEXP _motif_na_prop_polygon(SEXP xSEXP, SEXP no_of_outside_cellsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type no_of_outside_cells(no_of_outside_cellsSEXP);
    rcpp_result_gen = Rcpp::wrap(na_prop_polygon(x, no_of_outside_cells));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_motif_create_attributes", (DL_FUNC) &_motif_create_attributes, 1},
    {"_motif_get_composition", (DL_FUNC) &_motif_get_composition, 2},
    {"_motif_get_motifel_size", (DL_FUNC) &_motif_get_motifel_size, 3},
    {"_motif_get_motifels", (DL_FUNC) &_motif_get_motifels, 10},
    {"_motif_get_polygons", (DL_FUNC) &_motif_get_polygons, 9},
    {"_motif_get_unique_values", (DL_FUNC) &_motif_get_unique_values, 2},
    {"_motif_na_prop", (DL_FUNC) &_motif_na_prop, 2},
    {"_motif_na_prop_polygon", (DL_FUNC) &_motif_na_prop_polygon, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_motif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
